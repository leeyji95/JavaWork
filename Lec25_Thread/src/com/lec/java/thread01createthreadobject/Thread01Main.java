package com.lec.java.thread01createthreadobject;
// 자바에서의 쓰레드 구현은 어떻게 되어 있을까?

/*	쓰레드 Thread
 *  동일 프로세스 내에 '독립'적인 다중 수행하는 프로그램 단위
 *  병행성 증진. 처리율 향상, 응답속도 향상 목적
 * 
 * 
 * // 이게 자바로 쓰레드 구현하는 첫번째 방법. 
 *  자바에서 쓰레드를 만들어서 사용하는 방법1:
 *   1. Thread 클래스를 상속받는 클래스를 정의
 *   2. 정의한 클래스에서 run() 메소드를 override - 쓰레드에서 할 일을 구현
 *   3. Thread 클래스의 인스턴스를 생성
 *   4. 생성된 인스턴스에서 start() 메소드를 호출
 */

public class Thread01Main {

	public static void main(String[] args) {
		System.out.println("쓰레드 생성 1");
		
		// 3. Thread 클래스의 인스턴스를 생성
		Thread th1 = new MyThread("Hello Java");
		Thread th2 = new MyThread("안녕하세요");
		 
		
		

		// 4. 생성된 인스턴스에서 start() 메소드를 호출
		th1.start();  // 쓰레드는 스타트 메소드로 뽑아낸다 !!!!  	// 메인은 메인대로 자기 갈길 가고, 별도의 쓰레드도 갈길 가고. // 여기까지 쓰레드는 2개(메인시작하면 무조건 쓰레드 하나 시작(무조건 하나 있는거에유!)
		th2.start();
		
		
		
		
		
		// Thread 클래스의 start() 메소드를 호출하면,
		// 내부적으로 run() 메소드가 호출됨
		// start() 메소드가 호출되어야 OS에 의해서 쓰레드로 동작을 하게 됨
		
		// run() 메소드를 직접 호출하는 경우는 쓰레드로 동작하는 것이 아니라,
		// 단순히 run() 메소드만 실행이 되는 것임.
		
		// 이때 발생하는 호출스택 관계도는 '자바의 정석' p626 그림 참조.   p628,629 예제
		
		System.out.println("=======================");
		System.out.println("여기는 언제 출력될까요?");
		System.out.println("=======================");
		
		
		// 하나의 쓰레드는 start() 가 딱 한번만 호출될수 있다.
		// 만약 아래와 같이 다시 start() 하면 IllegalThreadStateException 발생
//		th1.start();  // 자바에서 쓰레드 익셉션도 별도의 쓰레드로 수행됨.
		
		// 아래와 같이 새로 생성해서 사용하면 가능
		th1 = new MyThread("Hello, Jva2020");
		th1.start();
	
		
	// 워킹쓰레드(작업쓰레드)세번 뽑아내서 동시에 수행시켰다.
		// 이게 자바로 쓰레드 구현하는 첫번째 방법. 
		
		
	} // end main()

} // end class


// 1. Thread 클래스를 상속받는 클래스를 정의
class MyThread extends Thread {  // extends Thread 상속받기

	private String msg;
	private int count;
	
	public MyThread() {}

	public MyThread(String msg) {
		this.msg = msg;
		count = 0;
	}
	
	
	
	// 2. 정의한 클래스에서 run() 메소드를 override
	// 쓰레드에서 할 일을 구현
	@Override
		public void run() {  // Thread 클래스 안에 있었다. -> 그러니까 오버라이드 할 수 있는 것
		 	for(int i =  0; i < 100; i++) {
		 		System.out.println(getName() + " " + count + " : " + msg);
		 		count++;
		 	} 
		}
	
	
	
	
	
	
/* <Thread> 필기
CPU 는 특정 순간에 하나의 프로세스를 처리함. 근데 어떻게 컴퓨터는 동시에 여러개를 처리하는가
프로세스들의 시간을 쪼갬
각각의 프로세스의 시간들이 쪼개져서  특정 프로세스가 수행됨.
이것들이 엄청난 속도로 동시에 작업한다면 한번에 돌아가는 것처럼 보임. 사실은 시간을 분할해서 프로세스 돌아감.(시분할)

프로그램 돌아가는 중~
흐름자체를 하나의 프로세스 안에서 동시에 수행할 수 있도록 짜야함. 그걸 쓰레드라고 함.
main 시작하면 하나의 쓰레드가 시작되는 것. -> Main Thread  하나 동작 

메인 외에 다른 쓰레드 동시에 몇개 더 수행하도록 할 것임.
이것도 내부적으로 시분할함. 메인 진행했다가 잠시 멈추고, 또 티 2 진행했다가 잠시 멈추고..
세개의 쓰레드가 동시에 진행되어 -> 동시에 여러개의 작업을 실행시킬 수 있음.


이런걸 왜 하는가?
위와 같은 동작을 멀티쓰레딩 이라고 함.
만약에 쓰레드 하나만 진행한다면 그 외에 다른 작업 수행불가 
시간이 걸리는 별도의 작업들은 별도의 쓰레드로 뽑아냄.  그게 끝나면 다른 작업 이어서 힘

웹에서는 이미 서버가 멀티쓰레딩으로 구현되어 있기때문에 별로 중요하지 않음.
특히 안드로이드할 때 신경써야함.

자바에서의 쓰레드 구현은 어떻게 되어 있을까?

쓰레드 시분할 만큼은 자바가상머신이 아니고 윈도우가 담당함

하나의 쓰레드로 처리할 수 있는 것을 별도의 멀티 쓰레드로 뽑지 말아라.
쓰레드 간에 왔다리갔다리 하는 것도 그 사이에 딜레이가 생김.

“Dead Lock@@!!”

두개의 쓰레드가 있는데,
쓰레드 1이 수행되려면 객체 2개가 있어야 수행할 수 있어.
1은 오브젝트 1만 가지고 있어. 반대로 쓰레드 2도 그런상황.
서로가 필요한  오브젝트를 놓아주길 기다리고 있는 상태.

Thread 에서는 생성하고 사용할 줄만 알면 됨.
 */
	
	
} // end class MyThread












