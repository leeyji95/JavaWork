<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied"
		class="com.lec.sts18_security.security.CustomAccessDeniedHandler" />

	<bean id="customLoginSuccess"
		class="com.lec.sts18_security.security.CustomLoginSuccessHandler" />


	<!-- 컨테이너의 HTTP security 요소 -->
	<security:http>
		<!-- 특정 url pattern 의 요청이 들어올 때 인터셉터를 이용해 접근 제한 설정 -->
		<security:intercept-url pattern="/sample/all"
			access="permitAll" />

		<!-- /sample/member URI 요청은 ROLE_MEMBER 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />

		<!-- /sample/admin URI 요청은 ROLE_ADMIN 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')" />

		<!-- <security:form-login/> --> <!-- (스프링 기본 제공 로그인 페이지 사용) 이것이 스프링에서 제공하는 로그인 페이지 객체이다. 나중에 커스터마이징 할 수 있다. 
			(내가 만들지 않은 것) -->
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess" />

		<!-- 에러 처리하기 : 에러 난 경우 특정 url 로 처리하여 에러페이지가 나오도록 하는 방법이다. -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<security:access-denied-handler
			ref="customAccessDenied" />

		<security:logout logout-url="/customLogout"
			invalidate-session="true" />
	</security:http>




	<!-- AuthenticationManager 빈 생성 -->

	<!-- Spring Security 가 동작하기 위해서는 AuthenticationManager 가 필요하다 -->
	<security:authentication-manager>
		<!-- UserDetailsService 사용자 인증과 권한 처리 -->
		<security:authentication-provider>
			<security:user-service>
				<security:user name="member" password="{noop}member"
					authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}admin"
					authorities="ROLE_MEMBER, ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- {noop} : 패스워드 인코딩 처리 없이 사용할 경우 ROLE_MEMBER : 로그인 성공시 부여되는 권한 -->
</beans>
